<?xml version="1.0" encoding="UTF-8"?>
<cursor-rules>
    <directory-structure>
        <base-dir>src</base-dir>
        <rules>
            <rule id="use-src">All application code must be placed within the src directory</rule>
            <rule id="server-client-separation">Separate server and client code clearly with 'use client' directives</rule>
        </rules>
        
        <directories>
            <directory path="src/server">
                <description>Server-side code and API routes</description>
                <subdirectories>
                    <directory>mutations</directory>
                    <directory>queries</directory>
                    <directory>db</directory>
                </subdirectories>
                <patterns>
                    <pattern>src/server/**/*.ts</pattern>
                </patterns>
            </directory>
            
            <directory path="src/components">
                <description>React components</description>
                <subdirectories>
                    <directory>ui</directory>
                    <directory>auth</directory>
                    <directory>layout</directory>
                </subdirectories>
            </directory>
            
            <directory path="src/core">
                <description>Core utilities and configurations</description>
                <subdirectories>
                    <directory>utils</directory>
                    <directory>config</directory>
                    <directory>types</directory>
                </subdirectories>
            </directory>

            <directory path="prisma">
                <description>Database schema and migrations</description>
                <files>
                    <file>schema.prisma</file>
                    <file>migrations/**/*.sql</file>
                </files>
            </directory>
        </directories>
    </directory-structure>

    <protected-flows>
        <authentication-flow>
            <description>Authentication system is stable and should not be modified</description>
            <protected-paths>
                <path>src/server/mutations/login/**</path>
                <path>src/server/mutations/register/**</path>
                <path>src/server/mutations/auth/**</path>
                <path>src/server/mutations/oauth/**</path>
            </protected-paths>
            <rules>
                <rule id="no-auth-modifications">DO NOT modify any authentication, login, or register flow components or logic</rule>
                <rule id="auth-flow-stable">Authentication flow is stable and working - avoid any changes</rule>
                <rule id="oauth-protected">OAuth implementation is finalized - do not modify provider integrations</rule>
                <rule id="session-handling">Session management is properly configured - do not alter session logic</rule>
            </rules>
            <exceptions>
                <exception>Only modify if explicitly required for security patches</exception>
                <exception>UI styling changes allowed but must not affect functionality</exception>
            </exceptions>
        </authentication-flow>
    </protected-flows>

    <coding-standards>
        <typescript>
            <rule>Use type instead of interface</rule>
            <rule>Export types from dedicated type files</rule>
            <rule>Use proper type imports: import type { Type } from '@/path'</rule>
            <rule>Always use TypeScript for new files</rule>
        </typescript>

        <components>
            <rule>Use 'use client' directive at the top of client components</rule>
            <rule>Add empty line after 'use client' directive</rule>
            <rule>Export default for page components</rule>
            <rule>Use named exports for utility functions</rule>
            <rule>Follow the pattern: export default function ComponentName({prop}: PropType)</rule>
        </components>

        <authentication>
            <rule severity="critical">DO NOT modify existing authentication flow - it is stable and working</rule>
            <rule severity="critical">Authentication mutations in server/mutations/auth are final</rule>
            <rule severity="critical">Login and register flows are production-ready - avoid changes</rule>
            <rule>Only add new authentication features in separate modules</rule>
            <rule>Document any security-related changes thoroughly</rule>
        </authentication>

        <prisma>
            <rule>Run prisma generate after schema changes</rule>
            <rule>Keep schema.prisma in sync with database</rule>
            <rule>Use proper Prisma client initialization</rule>
        </prisma>

        <styles>
            <rule>Use Tailwind CSS for styling</rule>
            <rule>Use clsx/twMerge for conditional classes</rule>
            <rule>Follow the typography utility patterns</rule>
        </styles>

        <naming>
            <rule>Use kebab-case for files</rule>
            <rule>Use PascalCase for components</rule>
            <rule>Use camelCase for functions and variables</rule>
            <rule>Use UPPER_CASE for constants</rule>
        </naming>
    </coding-standards>

    <font-styles>
        <rule>Use MixedFont component for combining mono and regular fonts</rule>
        <rule>Follow the FontStyle type: 'mono' | 'regular' | 'mixed'</rule>
        <rule>Use proper font style utilities from typography.ts</rule>
    </font-styles>

    <imports>
        <rule>Use absolute imports with @/ prefix</rule>
        <rule>Group imports by type (React, components, utils, types)</rule>
        <rule>Keep import statements organized and clean</rule>
    </imports>

    <error-handling>
        <rule>Use proper error types for different scenarios</rule>
        <rule>Implement proper error boundaries</rule>
        <rule>Handle async errors appropriately</rule>
    </error-handling>

    <state-management>
        <rule>Use React hooks for local state</rule>
        <rule>Keep state logic separated in custom hooks</rule>
        <rule>Follow proper useEffect cleanup patterns</rule>
    </state-management>

    <security-guidelines>
        <authentication>
            <rule severity="critical">Existing authentication flow is production-ready - DO NOT MODIFY</rule>
            <rule>Any security updates must be reviewed by team lead</rule>
            <rule>Keep authentication configuration in dedicated files</rule>
            <rule>Maintain existing security best practices</rule>
        </authentication>
        <data-protection>
            <rule>Follow existing password hashing methods</rule>
            <rule>Maintain current session security measures</rule>
            <rule>Keep sensitive data handling as implemented</rule>
        </data-protection>
    </security-guidelines>
</cursor-rules> 
